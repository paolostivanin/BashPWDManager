#!/bin/bash

#################################################################
# @Author: Paolo Stivanin aka Polslinux
# @Name: Bash Password Manager
# @Copyright: 2011
# @Site: http://projects.polslinux.it
# @License: GNU AGPL v3 http://www.gnu.org/licenses/agpl.html
#################################################################

IFS=$'\n'
version="1.0.991"
user=`id -u`
conf_file="/home/$USER/.config/bpwdman.conf"


function exit_script(){
if [ $? != "0" ] ; then
 exit 0
fi
}

function check_db(){
 path_to_db=`cat $conf_file | grep database-path | cut -f2 -d'='`
 if [ $path_to_db == "0" ] ; then
 file_db=`zenity --file-selection --title "Choose database"`
 else
 file_db=`cat $conf_file | grep database-path | cut -f2 -d'='`
 exit_script
 fi
 crypto_algo=`cat $conf_file | grep algo | cut -f2 -d'='`
 path_db=`dirname $file_db`
 local permission=`ls -l $file_db | cut -f2 -d'-'`
 if [ ! -f $file_db ] || [ "$permission" != "rw" ]; then
  zenity --error --text "Database doesn't exist or hasn't read/write permissions." --title "Database Error"
  exit 1
 fi
}

function decrypt_db(){
 gpg -o $path_db/out_db_gpg --cipher-algo=$crypto_algo -d $file_db
 mv $path_db/out_db_gpg $file_db
 openssl aes-256-cbc -d -a -in $file_db -out $path_db/out_db
 mv $path_db/out_db $file_db
}

function input_info(){
 local title=`zenity --entry --title "Title" --text "Write Title"`
 exit_script
 local username=`zenity --entry --title "Username" --text "Write Username"`
 exit_script
 local password=`zenity --entry --hide-text --title "Password" --text "Write password"`
 exit_script
 echo "TITLE: $title | USER: $username | PASSWORD: $password" >> $file_db
 echo "-------------------------------" >> $file_db
}

function input_again(){
zenity --question --title "Another?" --text "Do you want to add another password?" --ok-label=Yes --cancel-label=No
if [ "$?" = "0" ] ; then
input_info
fi
}

function encrypt_db(){
 openssl aes-256-cbc -a -salt -in $file_db -out $path_db/enc_db_openssl
 mv $path_db/enc_db_openssl $file_db
 gpg -o $path_db/enc_db --cipher-algo=$crypto_algo -c $file_db
 mv $path_db/enc_db $file_db
}

function fine_prog(){
 unset file_db
 unset path_db
 unset conf_file
 unset IFS
 exit 0
}

function fine_prog_from_view(){
 unset file_db
 unset path_db
 unset ans
 unset conf_file
 unset IFS
 exit 0
}

function view_again(){
zenity --question --title "Another?" --text "Do you want to see another password?" --ok-label=Yes --cancel-label=No
if [ "$?" = "0" ] ; then
view_db
fi
}

function view_db(){
if [ "$ans" == "View All" ] ; then
cat $file_db | zenity --text-info --width=800 --height=600
elif [ "$ans" == "View One" ] ; then
local titlepass=`zenity --entry --title="Title" --text="Write the TITLE (eg Facebook, Gmail, ecc):" --entry-text ""`
cat $file_db | grep -i $titlepass | zenity --text-info
fi
}

function check_user(){
if [ "$user" = 0 ] ; then
 zenity --error --text "You are root, start the script as NORMAL user"
 exit 1
fi
}

function check_before_start(){
if [ ! -f $conf_file ] ; then
zenity --question --text "You have open the terminal and write
'bashpwdm-config' before use this script.
Do you want to do this now?" --title "Warning" --width=350 --ok-label=Yes --cancel-label=No
 if [ "$?" == "0" ] ; then
 source bashpwdm-config
 zenity --warning --text "All done, now it is time to restart this script :)" --title "Warning" --width=400
 exit 0
 else 
   exit 0
 fi
fi
}

function view_or_add(){
ans=$(zenity  --list  --text "Do you want to view password or add password?" --radiolist  --column "Pick" --column "Choice" TRUE Add FALSE "View All" FALSE "View One")
if [ "$ans" == "View All" ] || [ "$ans" == "View One" ] ; then
check_db
decrypt_db
view_db
view_again
encrypt_db
fine_prog_from_view
fi
}


if [ "$1" == "-v" ] ; then
 echo -ne "\nBash Password Manager version $version\n\n"
 exit 0
 elif [ "$1" == "-p" ] ; then
  nchar=`zenity --entry --title="Character" --text="Write number of password character:" --entry-text ""`
  char="[:graph:]"
  pass=`</dev/urandom tr -dc $char | head -c $nchar`
  zenity --info --text "Your password is:
$pass" --title "Generated Password"
  unset pass
  exit 0
 elif [ "$1" == "-c" ] ; then
  file_db=`zenity --file-selection --title "Choose database"`
  exit_script
  crypto_algo=`cat $conf_file | cut -f1 -d' '`
  path_db=`dirname $file_db`
  gpg -o $path_db/out_db_gpg --cipher-algo=$crypto_algo -d $file_db
  openssl aes-256-cbc -d -a -in $path_db/out_db_gpg -out $path_db/out_db
  mv $path_db/out_db $file_db
  typ=`zenity  --list  --text "Choose the new cipher algo" --radiolist  --column "Choice" --column "Type" TRUE CAST5 FALSE 3DES FALSE AES256 FALSE TWOFISH FALSE  BLOWFISH | tr '[A-Z]' '[a-z]'`
  exit_script
  sed -i "/algo/c algo=$typ" $conf_file
  openssl aes-256-cbc -a -salt -in $file_db -out $path_db/enc_db_openssl
  gpg -o $path_db/enc_db --cipher-algo=$crypto_algo -c $path_db/enc_db_openssl
  mv $path_db/enc_db $file_db
fi

check_user
check_before_start
view_or_add
check_db
decrypt_db
input_info
input_again
encrypt_db
fine_prog
